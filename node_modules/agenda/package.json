{
  "name": "agenda",
  "version": "0.4.4",
  "description": "Light weight job scheduler for Node.js",
  "main": "index.js",
  "scripts": {
    "test": "mocha",
    "blanket": {
      "pattern": "lib",
      "data-cover-never": "node_modules"
    }
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/rschmukler/agenda"
  },
  "keywords": [
    "job",
    "jobs",
    "cron",
    "delayed",
    "scheduler",
    "runner"
  ],
  "author": {
    "name": "Ryan Schmukler",
    "email": "ryan@slingingcode.com",
    "url": "http://slingingcode.com/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/rschmukler/agenda/issues"
  },
  "dependencies": {
    "human-interval": "0.1.1",
    "date.js": "~0.1.1",
    "mongoskin": "~0.6.0",
    "cron": "~1.0.1"
  },
  "devDependencies": {
    "mocha": "~1.13.0",
    "expect.js": "~0.2.0",
    "mocha-lcov-reporter": "0.0.1",
    "coveralls": "~2.3.0",
    "blanket": "~1.1.5",
    "q": "*"
  },
  "readme": "# Agenda\n[![Build Status](https://api.travis-ci.org/rschmukler/agenda.png)](http://travis-ci.org/rschmukler/agenda) \n[![Code Climate](https://d3s6mut3hikguw.cloudfront.net/github/rschmukler/agenda.png)](https://codeclimate.com/github/rschmukler/agenda/badges) \n[![Coverage Status](https://coveralls.io/repos/rschmukler/agenda/badge.png)](https://coveralls.io/r/rschmukler/agenda)\n\nAgenda is a light-weight job scheduling library for Node.js. \n\nIt offers:\n\n- Minimal overhead. Agenda aims to keep its code base small.\n- Mongo backed persistance layer.\n- Scheduling with configurable priority, concurrency, and repeating\n- Scheduling via cron or human readable syntax.\n- Event backed job queue that you can hook into.\n\n# Installation\n\nInstall via NPM\n\n    npm install agenda\n\n# Example Usage\n\n```js\nvar agenda = new Agenda({db: { address: 'localhost:27017/agenda-example'}});\n\nagenda.define('delete old users', function(job, done) {\n  User.remove({lastLogIn: { $lt: twoDaysAgo }}, done);\n});\n\nagenda.every('3 minutes', 'delete old users');\n\n// Alternatively, you could also do:\n\nagenda.every('*/3 * * * *', 'delete old users');\n\nagenda.start();\n```\n\n```js\nagenda.define('send email report', {priority: 'high', concurrency: 10}, function(job, done) {\n  var data = job.attrs.data;\n  emailClient.send({ \n    to: data.to,\n    from: 'example@example.com',\n    subject: 'Email Report',\n    body: '...'\n  }, done);\n});\n\nagenda.schedule('in 20 minutes', 'send email report', {to: 'admin@example.com'});\nagenda.start();\n```\n\n```js\nvar weeklyReport = agenda.schedule('Saturday at noon', 'send email report', {to: 'another-guy@example.com'});\nweeklyReport.repeatEvery('1 week').save();\nagenda.start();\n```\n\n# Full documentation\n\nAgenda's basic control structure is an instance of an agenda. Agenda's are\nmapped to a database collection and load the jobs from within.\n\n## Table of Contents\n- [Configuring an agenda](#configuring-an-agenda)\n- [Defining job processors](#defining-job-processors)\n- [Creating jobs](#creating-jobs)\n- [Starting the job processor](#starting-the-job-processor)\n- [Manually working with jobs](#manually-working-with-a-job)\n- [Job Queue Events](#job-queue-events)\n- [Frequently asked questions](#frequently-asked-questions)\n\n## Configuring an agenda \nAll configuration methods are chainable, meaning you can do something like:\n\n```js\nvar agenda = new Agenda();\nagenda\n  .database(...)\n  .processEvery('3 minutes')\n  ...;\n```\n\n### database(url, [collectionName])\n\nSpecifies the database at the `url` specified. If no collection name is give,\n`agendaJobs` is used.\n\n```js\nagenda.database('localhost:27017/agenda-test', 'agendaJobs');\n```\n\nYou can also specify it during instantiation.\n\n```js\nvar agenda = new Agenda({db: { address: 'localhost:27017/agenda-test', collection: 'agendaJobs' }});\n```\n\n### processEvery(interval)\n\nTakes a string `interval` which can be either a traditional javascript number,\nor a string such as `3 minutes`\n\nSpecifies the frequency at which agenda will query the database looking for jobs\nthat need to be processed. If your jobs are time sensitive, you will want to\nspecify a low value.\n\n```js\nagenda.processEvery('1 minute');\n```\n\nYou can also specify it during instantiation\n\n```js\nvar agenda = new Agenda({processEvery: '30 seconds'});\n```\n\n### maxConcurrency(number)\n\nTakes a `number` which specifies the max number of jobs that can be running at\nany given moment. By default it is `20`.\n\n```js\nagenda.maxConcurrency(20);\n```\n\nYou can also specify it during instantiation\n\n```js\nvar agenda = new Agenda({maxConcurrency: 20});\n```\n\n### defaultConcurrency(number)\n\nTakes a `number` which specifies the default number of a specific that can be running at\nany given moment. By default it is `5`.\n\n```js\nagenda.defaultConcurrency(5);\n```\n\nYou can also specify it during instantiation\n\n```js\nvar agenda = new Agenda({defaultConcurrency: 5});\n```\n\n\n## Defining Job Processors\n\nBefore you can use a job, you must define its processing behavior.\n\n### define(jobName, [options], fn)\n\nDefines a job with the name of `jobName`. When a job of job name gets run, it\nwill be passed to `fn(job, done)`. To maintain asynchronous behavior, you must\ncall `done()` when you are processing the job. If your function is synchronous,\nyou may omit `done` from the signature.\n\n`options` is an optional argument which can overwrite the defaults. It can take\nthe following:\n\n- `concurrency`: `number` maxinum number of that job that can be running at once\n- `priority`: `(lowest|low|normal|high|highest|number)` specifies the priority\n  of the job. Higher priority jobs will run first. See the priority mapping\n  below\n\nPriority mapping:\n```\n{\n  highest: 20,\n  high: 10,\n  default: 0,\n  low: -10,\n  lowest: -20\n}\n```\n\nAsync Job:\n```js\nagenda.define('some long running job', function(job, done) {\n  doSomelengthyTask(function(data) {\n    formatThatData(data);\n    sendThatData(data);\n    done();\n  });\n});\n```\n\nSync Job:\n\n```js\nagenda.define('say hello', function(job) {\n  console.log(\"Hello!\");\n});\n```\n\n## Creating Jobs\n\n### every(interval, name, [data])\n\nRuns job `name` at the given `interval`. Optionally, data can be passed in.\nEvery creates a job of type `single`, which means that it will only create one\njob in the database, even if that line is run multiple times. This lets you put\nit in a file that may get run multiple times, such as `webserver.js` which may\nreboot from time to time.\n\n`interval` can be a human-readable format `String`, a cron format `String`, or a `Number`.\n\n`data` is an optional argument that will be passed to the processing function\nunder `job.attrs.data`.\n\nReturns the `job`.\n\n```js\nagenda.define('printAnalyticsReport', function(job, done) {\n  User.doSomethingReallyIntensive(function(err, users) {\n    processUserData();\n    console.log(\"I print a report!\");\n    done();\n  });\n});\n\nagenda.every('15 minutes', 'printAnalyticsReport');\n```\n\n### schedule(when, name, data)\n\nSchedules a job to run `name` once at a given time. `when` can be a `Date` or a\n`String` such as `tomorrow at 5pm`.\n\n`data` is an optional argument that will be passed to the processing function\nunder `job.data`.\n\nReturns the `job`.\n\n\n```js\nagenda.schedule('tomorrow at noon', 'printAnalyticsReport', {userCount: 100});\n```\n\n### create(jobName, data)\n\nReturns an instance of a `jobName` with `data`. This does *NOT* save the job in\nthe database. See below to learn how to manually work with jobs.\n\n```js\nvar job = agenda.create('printAnalyticsReport', {userCount: 100});\njob.save(function(err) {\n  console.log(\"Job successfully saved\");\n});\n```\n\n## Starting the job processor\n\nTo get agenda to start processing jobs from the database you must start it. This\nwill schedule an interval (based on `processEvery`) to check for new jobs and\nrun them. You can also stop the queue.\n\n### start\n\nStarts the job queue processing, checking `processEvery` time to see if there\nare new jobs.\n\n### stop\n\nStops the job queue processing.\n\n\n## Manually working with a job\n\nA job instance has many instance methods. All mutating methods must be followed\nwith a call to `job.save()` in order to persist the changes to the database.\n\n\n### repeatEvery(interval)\n\nSpecifies an `interval` on which the job should repeat.\n\n`interval` can be a human-readable format `String`, a cron format `String`, or a `Number`.\n\n```js\njob.repeatEvery('10 minutes');\njob.save();\n```\n\n### schedule(time)\n\nSpecifies the next `time` at which the job should repeat.\n\n```js\njob.schedule('tomorrow at 6pm');\njob.save();\n```\n\n### priority(priority)\n\nSpecifies the `priority` weighting of the job. Can be a number or a string from\nthe above priority table.\n\n```js\njob.priority('low');\njob.save();\n```\n\n### fail(reason)\n\nSets `job.attrs.failedAt` to `now`, and sets `job.attrs.failReason`\nto `reason`.\n\n```js\njob.fail('insuficient disk space');\njob.save();\n```\n\n### run(callback)\n\nRuns the given `job` and calls `callback(err, job)` upon completion. Normally\nyou never need to call this manually.\n\n```js\njob.run(function(err, job) {\n  console.log(\"I don't know why you would need to do this...\");\n});\n```\n\n### save(callback)\n\nSaves the `job.attrs` into the database.\n\n```js\njob.save(function(err) {\n    if(!err) console.log(\"Successfully saved job to collection\");\n})\n```\n\n## Job Queue Events\n\nAn instance of an agenda will emit the following events:\n\n- `complete` - called when a job finishes, regardless of if it succeeds or fails\n- `complete:job name` - called when a job finishes, regardless of if it succeeds or fails\n\n```js\nagenda.on('complete', function(job) {\n  console.log(\"Job %s finished\", job.attrs.name);\n});\n```\n\n- `success` - called when a job finishes successfully\n- `success:job name` - called when a job finishes successfully\n\n```js\nagenda.once('success:send email', function(job) {\n  console.log(\"Sent Email Successfully to: %s\", job.attrs.data.to);\n});\n```\n\n- `fail` - called when a job throws an error\n- `fail:job name` - called when a job throws an error\n\n```js\nagenda.on('fail:send email', function(err, job) {\n  console.log(\"Job failed with error: %s\", err.message);\n});\n```\n\n## Frequently Asked Questions\n\n### Mongo vs Redis\n\nThe decision to use Mongo instead of Redis is intentional. Redis is often used for\nnon-essential data (such as sessions) and without configuration doesn't\nguarantee the same level of persistence as Mongo (should the server need to be\nrestarted/crash). \n\nAgenda decides to focus on persistence without requiring special configuration\nof Redis (thereby degrading the performance of the Redis server on non-critical\ndata, such as sessions). \n\nUltimately if enough people want a Redis driver instead of Mongo, I will write\none. (Please open an issue requesting it). For now, Agenda decided to focus on\nguaranteed persistence.\n\n\n\n\n# License\n(The MIT License)\n\nCopyright (c) 2013 Ryan Schmukler <ryan@slingingcode.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the 'Software'), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "agenda@0.4.4",
  "_from": "agenda@"
}
